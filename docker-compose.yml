services:
  nginx:
    container_name: assistant-nginx
    image: nginx:alpine
    ports:
      - "80:80"
    environment:
      TZ: "Europe/Moscow"
    volumes:
      - ./php:/var/www
      - ./.docker/images/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - phpsocket:/var/run
    networks:
      - assistant-network
    extra_hosts:
      - "host.docker.internal:host-gateway"

  php:
    container_name: assistant-php
    build:
      context: ./.docker/images/php/
      dockerfile: Dockerfile
    volumes:
      - ./php:/var/www
      - ./.docker/images/php/php.ini:/usr/local/etc/php/php.ini
      - ./.docker/volumes/php/sessions:/var/lib/php/sessions
      - phpsocket:/var/run
      - $HOME/projects:/hostProjects
    links:
      - nginx:assistant-api.local
    networks:
      - assistant-network
    depends_on:
      - db
      - redis
      - neo4j
    environment:
      PHP_IDE_CONFIG: "serverName=assistant-api-php8.3"
      POSTGRES_DB: "assistant"
      POSTGRES_USER: "assistant"
      POSTGRES_PASSWORD: "assistant"
      NEO4J_URI: "bolt://neo4j:7687"
      REDIS_HOST: "redis"
      TZ: "Europe/Moscow"

  db:
    container_name: assistant-db
    image: postgres:16
    environment:
      POSTGRES_DB: assistant
      POSTGRES_USER: assistant
      POSTGRES_PASSWORD: assistant
    volumes:
      - ./.docker/volumes/postgres/data:/var/lib/postgresql/data
    networks:
      - assistant-network
    ports:
      - "5432:5432"  # Выводим порт базы данных наружу
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    container_name: assistant-redis
    image: redis:7
    volumes:
      - ./.docker/volumes/redis/data:/data
    networks:
      - assistant-network

  neo4j:
    container_name: assistant-neo4j
    image: neo4j:5.24-enterprise
    environment:
      NEO4J_AUTH: neo4j/assistant
      NEO4J_internal_dbms_tx__log_fail__on__corrupted__log__files: false
      NEO4J_ACCEPT_LICENSE_AGREEMENT: yes
      NEO4J_server_memory_pagecache_size: 2G
      NEO4J_dbms_memory_transaction_total_max: 4G
      NEO4J_db_memory_transaction_max: 4G
      NEO4J_server_memory_heap_max__size: 8G
      NEO4J_PLUGINS: '["apoc", "apoc-extended", "graph-data-science"]'
      NEO4J_apoc_export_file_enabled: true
      NEO4J_apoc_import_file_enabled: true
      NEO4J_apoc_import_file_use__neo4j__config: true
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - ./.docker/volumes/neo4j/data:/data
      - ./.docker/volumes/neo4j/logs:/logs
      - ./.docker/volumes/neo4j/conf:/conf
      - ./.docker/volumes/neo4j/plugins:/plugins
      - ./.docker/volumes/neo4j/licenses:/licenses
      - ./.docker/volumes/neo4j/import:/import
      - ./.docker/volumes/neo4j/metrics:/metrics
    networks:
      - assistant-network

  svelte:
    container_name: assistant-svelte
    image: node:18-alpine
    volumes:
      - ./frontend:/app
    working_dir: /app
    command: sh -c "npm install -g npm@10.9.0 && npm install && npm run dev -- --host"
    ports:
      - "5173:5173"
    environment:
      - NODE_ENV=development
      - PORT=5173
      - HOST=0.0.0.0
    networks:
      - assistant-network

  fastapi:
    image: assistant-base-python
    container_name: assistant-fastapi
    volumes:
      - ./pyCore:/app
      - ./.docker/volumes/universal/tmp:/tmp
      - ./.docker/volumes/python/venv:/venv
      - $HOME/.cache/pip-docker:/root/.cache/pip
      - $HOME/projects:/hostProjects
    working_dir: /app/app
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
    command: ["uvicorn", "main:app", "--reload", "--host", "0.0.0.0", "--port", "8000"]
    ports:
      - "8000:8000"
    networks:
      - assistant-network

  jupiter:
    image: assistant-base-python
    container_name: assistant-jupyter
    volumes:
      - ./pyCore:/app
      - ./.docker/volumes/universal/tmp:/tmp
      - ./.docker/volumes/python/venv:/venv
      - $HOME/.cache/pip-docker:/root/.cache/pip
      - $HOME/projects:/hostProjects
    working_dir: /app/app
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
    command: jupyter-lab --ip 0.0.0.0 --port 8888 --no-browser --allow-root
    ports:
      - "8888:8888"
    networks:
      - assistant-network

  etcd:
    container_name: assistant-etcd
    image: quay.io/coreos/etcd:v3.5.0
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
    volumes:
      - ./.docker/volumes/milvus/etcd:/etcd
    entrypoint: [
      "etcd",
      "--advertise-client-urls=http://127.0.0.1:2379",
      "--listen-client-urls=http://0.0.0.0:2379",
      "--data-dir",
      "/etcd"
    ]
    networks:
      - assistant-network

  minio:
    container_name: assistant-minio
    image: minio/minio:RELEASE.2020-12-03T00-03-10Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    volumes:
      - ./.docker/volumes/milvus/minio:/minio_data
    entrypoint: ["minio", "server", "/minio_data"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - assistant-network

  milvus:
    container_name: assistant-milvus
    image: milvusdb/milvus:latest
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - ./.docker/volumes/milvus/milvus:/var/lib/milvus
    command: ["milvus", "run", "standalone"]
    ports:
      - "19530:19530"
    depends_on:
      - "etcd"
      - "minio"
    networks:
      - assistant-network

volumes:
  phpsocket:

networks:
  assistant-network:
    driver: bridge
  default:
    name: assistant-network
